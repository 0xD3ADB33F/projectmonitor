{"body":"[![Build Status](https://secure.travis-ci.org/pivotal/projectmonitor.png?branch=master)](http://travis-ci.org/pivotal/projectmonitor)\r\n[![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/pivotal/projectmonitor)\r\n\r\nDescription\r\n===========\r\n\r\nProjectMonitor is a CI display aggregator. It displays the status of multiple\r\nContinuous Integration builds on a single web page.  The intent is that you\r\ndisplay the page on a big screen monitor or TV so that the status of all your\r\nprojects' builds are highly visible/glanceable (a \"Big Visible Chart\").\r\nProjectMonitor currently supports:\r\n\r\n  * [Cruise Control](http://cruisecontrolrb.thoughtworks.com/)\r\n  * [Jenkins](http://jenkins-ci.org/)\r\n  * [TeamCity](http://www.jetbrains.com/teamcity/)\r\n  * [Travis CI](http://travis-ci.org/)\r\n  * [tddium](http://www.tddium.com/)\r\n  * [Semaphore](http://www.semaphoreapp.com/)\r\n\r\nWe use ProjectMonitor internally at Pivotal Labs to display the status of the\r\nbuilds for all our client projects. We also have an instance of ProjectMonitor\r\nrunning at [ci.pivotallabs.com](http://ci.pivotallabs.com) that we use for\r\ndisplaying the status of the builds of various open source projects - both of\r\nprojects Pivotal Labs maintains (such as Jasmine) and of non-Pivotal projects\r\n(such as Rails).\r\n\r\n## Upgrading\r\n\r\nProjectMonitor has recently moved to\r\n[Devise](https://github.com/plataformatec/devise/) for authentication. This\r\nmeans that any existing users will have invalid passwords. If you don't want\r\nall your users to have to reset their passwords, you can alter the following\r\nconfiguration settings to support legacy passwords:\r\n\r\n    devise_encryptor: :legacy\r\n    devise_pepper: <rest_auth_site_key>\r\n    devise_stretches: <rest_auth_digest_stretches>\r\n\r\nThe values for `rest_auth_site_key` and `rest_auth_digest_stretches` can be found\r\nin your `config/auth.yml`. This file is no longer needed.\r\n\r\n## Installation\r\n\r\n### Get the code\r\n\r\nProjectMonitor is a Rails application. To get the code, execute the following:\r\n\r\n    git clone git://github.com/pivotal/projectmonitor.git\r\n    cd projectmonitor\r\n    bundle install\r\n\r\n### Initial Setup\r\n\r\nWe have provided an example file for `database.yml`. Run the following to \r\nautomatically generate these files for you:\r\n\r\n    rake setup\r\n\r\nYou likely need to edit the generated files.  See below.\r\n\r\n### Set up the database\r\n\r\nYou'll need a database. Create it with whatever name you want.  If you have not\r\nrun `rake setup`, copy `database.yml.example` to `database.yml`.  Edit the\r\nproduction environment configuration so it's right for your database:\r\n\r\n    cp config/database.yml.example config/database.yml\r\n    <edit database.yml>\r\n    RAILS_ENV=production rake db:create\r\n    RAILS_ENV=production rake db:migrate\r\n\r\n### Authentication support\r\n\r\nProject monitor uses Devise to provide both database backed authentication and\r\nGoogle OAuth2 logins.\r\n\r\n#### Password authentication\r\n\r\nRegular password authentication is enabled by default and can be switched off\r\nby setting the `password_auth_enabled` setting to `false`. To ensure strong\r\npassword encryption you should adjust the value for `password_auth_pepper` and\r\n`password_auth_stretches` appropriately.\r\n\r\n#### Google OAuth2 setup\r\n\r\nTo use Google OAuth2 authentication you need Google apps setup for your domain\r\nand the following configuration options specified:\r\n\r\n    oauth2_enabled: true\r\n    oauth2_apphost: 'MY_APP_ID'\r\n    oauth2_secret: 'MY_SECRET'\r\n\r\n### Setup Cron with Whenever\r\n\r\nWe have included a sample whenever gem config in config/schedule.rb. Refer to\r\nthe [whenever documentation](https://github.com/javan/whenever) for instructions\r\non how to integrate it with your deployment.\r\n\r\nThe default schedule clears log entries daily, and fetches project statuses every 3 minutes.\r\n\r\nThe fetch project task is what goes out and hits the individual builds. We find\r\nthat if you do this too frequently it can swamp the builds. On the other hand,\r\nyou don't want ProjectMonitor displaying stale information. At Pivotal we set\r\nit up to run every 3 minutes.\r\n\r\n### Start workers\r\n\r\nThe cron job above will add jobs to the queue, which workers will execute.  To\r\nstart running the workers, use the following command:\r\n\r\n    rake start_workers\r\n\r\nThe default number of workers is 2, but if you wanted 3 you would call it like this:\r\n\r\n    rake start_workers[3]\r\n\r\nThese workers need only be started once per system reboot, and must be running\r\nfor your project statuses to update.  To stop the workers, run this command:\r\n\r\n    rake stop_workers\r\n\r\nThe workers are implemented using the [delayed_job\r\ngem](http://github.com/collectiveidea/delayed_job).  The workers are configured\r\nto have a maximum timeout of 1 minute when polling project status.  If you want\r\nto change this setting, you can edit `config/initializers/delayed_job_config.rb`\r\n\r\n### Start the application\r\n\r\nExecute:\r\n\r\n    nohup rails server -e production &> projectmonitor.log\r\n\r\n## Configuration\r\n\r\nEach build that you want ProjectMonitor to display is called a \"project\" in\r\nProjectMonitor. You need to login to set up projects.\r\n\r\n\r\n### Create a user\r\n\r\nProjectMonitor can use either the [Restful Authentication\r\nplugin](http://github.com/technoweenie/restful-authentication), or Google\r\nOpenId for user security. If you are using Google OpenId, users will be\r\nautomatically provisioned.  All users from your domain will be permitted to\r\nedit projects. Otherwise, use the following steps to add users by hand.\r\n\r\nYour first user must be created at the command line.\r\n\r\n    rails c production\r\n    User.create!(login: 'john', name: 'John Doe', email: 'jdoe@example.com', password: 'password', password_confirmation: 'password')\r\n\r\nAfter that, you can login to ProjectMonitor with the username and password you\r\nspecified and use the \"New User\" link to create additional users.\r\n\r\n### Log in\r\n\r\nOpen a browser on ProjectMonitor. Login by clicking on \"Login\" in the upper-right corner.\r\n\r\n### Add projects\r\n\r\nClick on \"Projects\" in the upper-right corner. Click on \"New Project\" and enter\r\nthe details for a build you want to display on ProjectMonitor. The \"Name\",\r\n\"Project Type\", and \"Feed URL\" are required. If your Feed URL is\r\nhttp://myhost.com:3333/projects/MyProject, then your RSS URL is probably\r\nhttp://myhost.com:3333/projects/MyProject.rss.\r\n\r\n#### TeamCity\r\nTo configure TeamCity:\r\n\r\n*   Choose Team City Rest Project for the project type\r\n*   URL looks like: http://teamcity:8111/app/rest/builds?locator=running:all,buildType:(id:bt*) where * is the buildTypeId from the TeamCity Build Configuration.\r\n*   Requires a username and password that match a valid account in TeamCity with access to the Build Configuration.\r\n\r\nNOTE: The Cradiator-TeamCity-Plugin is deprecated. Please use the Team City\r\nRest Project configuration, which is natively supported by TeamCity 5+.\r\n\r\nOptionally, if your Build system is behind Basic Authentication or Digest\r\nAuthentication, you can enter the credentials.\r\n\r\nIf you want to temporarily hide your build on ProjectMonitor, you can uncheck\r\nthe \"Enable\" checkbox.\r\n\r\nProjectMonitor's main display page is at `/`. You can always get back there by\r\nchoosing the number of tiles you want at the lower left.\r\n\r\n#### Semaphore\r\nWhen configuring [Semaphore](http://semaphoreapp.com), you should use the Branch History URL from the API section of your Project Settings page.\r\n\r\nThis ensures that no build statuses will be missed.\r\n\r\n### Auto-start for Ubuntu\r\n\r\nIn order to have projectmonitor start when the machine boots, modify the startup\r\nscripts.  In the following example, we have modified /etc/rc.local on an Ubuntu\r\n10.04 server (change paths & userids as needed):\r\n\r\n    # need to set PS1 so that rvm is in path otherwise .bashrc bails too early\r\n    su - pivotal -c 'PS1=ps1; . /home/pivotal/.bashrc; cd ~/projectmonitor/current; bundle exec thin -e production start -c /home/pivotal/projectmonitor/current -p7990 -s3; bundle exec rake start_workers[6]'\r\n\r\n### Importing and Exporting Configurations\r\n\r\nYou can export your configuration for posterity or to be transferred to another\r\nhost:\r\n\r\n    rake cimonitor:export > ${your_configuration.yml}\r\n\r\nOr using heroku:\r\n\r\n    heroku run rake cimonitor:export --app projectmonitor-staging > ${your_configuration.yml}\r\n\r\nOr you can download it using the configuration endpoint, using curl (or your web browser):\r\n\r\n    curl --user ${username}:${password} ${your_project_monitor_host}/configuration > ${your_configuration.yml}\r\n\r\nNOTE: That heroku doesn't treat STDERR and STDOUT differently so you may get\r\nsome warnings at the beginning of the generated file that you'll have to remove\r\nmanually.\r\n\r\nIt can be imported in a similar way:\r\n\r\n    rake cimonitor:import < ${your_configuration.yml}\r\n\r\nOn heroku or another host which doesn't allow you to directly load files or\r\nread from stdin, you'll need to post the file to the configuration endpoint\r\nlike so:\r\n\r\n    curl --user ${username}:${password} -F \"content=@-\" ${your_project_monitor_host}/configuration < ${your_configuration.yml}\r\n\r\n## Deployment\r\n\r\n### Heroku\r\n\r\nTo get running on Heroku, after you have cloned and bundled, run the following commands:\r\n\r\nNB: These instructions are for the basic authentication strategy. \r\n\r\n    heroku create\r\n    heroku push heroku master\r\n    heroku run rake db:migrate\r\n    heroku config:add REST_AUTH_SITE_KEY=<unique, private and long alphanumeric key, e.g. abcd1234edfg78910>\r\n    heroku config:add REST_AUTH_DIGEST_STRETCHES<count of number of times to apply the digest, 10 recommended>\r\n    heroku run console \r\n\r\nWhen inside the console, run the creating a new user step above. You should then be able to access your server and start using it.\r\n\r\n## Cron\r\n\r\nYou need to hit an authenticated endpoint to run the scheduler. \r\n\r\n    POST http://localhost:3000/projects/update_projects\r\n\r\nYou can create a cron entry to hit this:\r\n\r\n    curl -dfoo=bar localhost:3000/projects/update_projects -uadmin:password\r\n\r\n## Display\r\n\r\nJust open a browser on `/`. The page will refresh every 30 seconds. When it\r\nrefreshes, it shows whatever status was last fetched by the cron job. That is,\r\na refresh doesn't cause the individual builds to be polled.\r\n\r\n### Layout\r\n\r\nThe new layout consists of a grid of tiles representing the projects.  The\r\nnumber of projects that need to be displayed is determined automatically, but\r\ncan also be set explicitly.  There are views available for 15 tiles, 24 tiles,\r\n48 tiles, or 63 tiles, and a 6-project view with larger tiles is coming soon.\r\n\r\n### Tile colors\r\n\r\nTiles are green for green projects, red for red projects, and light gray if the\r\nproject's build server cannot be reached. If the build server is online but no\r\nbuilds have been run then the tile will appear in yellow.\r\n\r\n### Project Ticker Codes\r\n\r\nEach tile shows the project's brief ticker code.  If not chosen explicitly,\r\nthis will be the first 4 letters of the project.\r\n\r\n### Build Statuses\r\n\r\nTo the right of the ticker and name, each project lists the amount of time\r\nsince the last build, followed by the build status history.  The last 5-8 builds\r\nare displayed from left to right, in reverse chronological order -- the most\r\nrecent build will be on the left and the least recent on the right.\r\nSuccessful builds are marked with a filled in circle, and unsuccessful builds\r\nare marked with an x.  When a build is in progress a spinner is displayed instead\r\nof the time since the last build.\r\n\r\n### Aggregate Projects\r\n\r\nStriped tiles indicate the aggregate status of several projects.  Click on an\r\naggregate project to see the status of its component projects.\r\n\r\n### Pivotal Tracker Integration\r\n\r\nProjectMonitor can display basic [Pivotal Tracker](http://pivotaltracker.com) information.  When\r\nconfigured, the current velocity will be displayed, as well as a graph showing points completed for\r\nthe current iteration and the past 9 iterations.  To add this integration, you will need to add your\r\nPivotal Tracker project ID and a Pivotal Tracker API key in the admin section.\r\n\r\n### Admin Interface\r\n\r\nClick 'manage projects' at the lower right to edit project details.\r\n\r\n## Tags\r\n\r\nYou can enter tags for a project (separated by commas) on the project edit page.  You can then have ProjectMonitor display\r\nonly projects that match a set of tags by going to /?tags=tag1,tag2\r\n\r\n## CI\r\n\r\nCI for ProjectMonitor is [here](http://travis-ci.org/pivotal/projectmonitor), and it's aggregated at [ci.pivotallabs.com](http://ci.pivotallabs.com)\r\n(that's an instance of ProjectMonitor, of course).\r\n\r\n## Development\r\n\r\nThe public Tracker project for ProjectMonitor is [here](http://www.pivotaltracker.com/projects/2872).\r\n\r\nTo run tests, run:\r\n\r\n    rake setup\r\n    rake spec\r\n\r\nTo run a local development server and worker, run:\r\n\r\n    foreman start\r\n\r\n## Deploying to Github\r\n\r\nProject Monitor has been moved under the \"Pivotal\" organization. Developers will need to request that their Github ID's are added as collaborators in order to have push privileges to the repo.\r\n\r\n## Ideas /Improvements\r\n\r\nGot a burning idea that just needs to be implemented? Join the google group and share it with the team.\r\n\r\nThe google group for Project Monitor is [projectmonitor_pivotallabs](http://groups.google.com/group/projectmonitor_pivotallabs)\r\n\r\nCopyright (c) 2012 Pivotal Labs. This software is licensed under the MIT License.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Projectmonitor","google":"UA-1687866-20","tagline":"Big Visible Chart CI aggregator"}